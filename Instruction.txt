

###########################################################################################



**사용전 세팅**


1. chrome driver 다운로드 & 설정
   
	크롬 드라이버 다운로드시, 크롬 버전과 맞는 것을 다운받아야 한다. 사이트 주소 : http://chromedriver.chromium.org/downloads
	또한 driver = webdriver.Chrome("**NEED PATH**"")에서 chrome driver의 위치를 설정해 주어야 한다.


2. 애플고딕체 다운로드 & path 설정
    
	시각화를 WordCloud API를 통해서 하는데, 외국에서 만든 API이다보니, 보통 한국 글씨체는 에러난다. 
	따라서 첨부된 AppleGothic.ttf을 윈도우10 기준, C:\Windows\Fonts 안에 넣어야 WordCloud가 돌아간다.
   

3. 부팅시 자동 시작 설정
   
	부파일 중 trendSearchAutoStart.bat파일이 있다. 우클릭-편집 후, trendCloud.py의 path를 입력해 준다. 
	다음,  window+R 키를 누르고 실행창에서 shell:startup를 치면 시작프로그램 파일에 들어가게 된다. 
	이 곳에 첨부된 trendSearchAutoStart.bat을 넣어준다.




###########################################################################################
###########################################################################################

사용한 라이브러리(requirements.txt 참고)

python>=3.7.2
beautifulsoup4>=4.6.3
selenium>=3.141.0
matplotlib>=3.0.2
wordcloud>=1.5.0

###########################################################################################
###########################################################################################



모바일 핫스팟 네트워크 처리 이슈

위 프로그램은 부팅시 바로 실행되기 때문에, 부팅했을 당시 인터넷이 연결되어 있지 않으면 예외처리된다. 
컴퓨터가 항시 한 네트워크에 연결되어 있다면 문제없지만, 만약 본인처럼 다양한 장소에 다니며 모바일 핫스팟을 이용하는 경우,
연결할 수 있는 네트워크가 많기 때문에, 모바일 핫스팟이 자동으로 연결되지 않는다.
이럴땐, 본인의 모바일 핫스팟의 네트워크 우선순위를 높히면 된다.

방법은 아래 링크들을 참조하면 된다.

특정한 네트워크의 우선순위를 높히는 법
https://jesus-in-me.tistory.com/6

만약 본인 핫스팟 네트워크의 우선순위를 높혔는데도 이상이 생긴다면, 
부팅시 프로그램 실행이 네트워크 연결보다 선행되었을 가능성이 있다.
이 경우, 부팅의 속도를 조금 늦추면 된다.
https://mastmanban.tistory.com/977

###########################################################################################

###########################################################################################



만약 각 단어가 정확히 몇번씩 나왔는지 궁금하면 아래 코드 참고
import operator


def WordCount(t):
    frequency = {}
    wordcount = {}
    wordCloudWords = []
    match_pattern = t

    for word in match_pattern:
        count = frequency.get(word, 0)
        frequency[word] = count + 1

    for words in frequency.keys():
        wordcount.update({words: frequency[words]})
        wordcount2 = sorted(wordcount.items(), key=operator.itemgetter(1), reverse=True)
        wordCloudWords.append(words)

    SortedWords = ([wordcount2[i] for i in range(1, 31)])
    #print("------sorted words-------")
    #print(SortedWords)
    #print("-------------------------")
    return SortedWords

###########################################################################################

